{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import rateLimit from 'express-rate-limit'\nimport dotenv from 'dotenv'\n\nimport callRoutes from './routes/call'\nimport Call from './models/Call'\nimport chatRoutes from './routes/chat'\nimport express from 'express'\nimport http from 'http'\nimport { Server } from 'socket.io'\nimport SocketsEvents from './utils/socket-events'\nimport cors from 'cors'\nimport helmet from 'helmet'\nimport Message from './models/Message'\n\nimport mongoose from 'mongoose'\nimport { isUserBusy } from './utils/helpers/isUserBusy'\nimport User from './models/User'\nimport { sendExpoNotification } from './utils/sendExpoNotification'\nimport { HealthChecker } from './utils/healthChecker'\n\ndotenv.config()\n\n// Connect to MongoDB\nconsole.log('Connecting to MongoDB...', process.env.MONGO_URI)\n\nmongoose\n  .connect(process.env.MONGO_URI)\n  .then(() => console.log('MongoDB connected'))\n  .catch((err) => console.error('MongoDB connection error:', err))\n\nconst app = express()\nconst server = http.createServer(app)\n\napp.use(helmet())\napp.use(\n  cors({\n    origin: [\n      'https://your-frontend-domain.com',\n      'http://localhost:19006', // Expo local dev\n      'http://localhost:8081', // Local dev\n    ],\n    methods: ['GET', 'POST'],\n  })\n)\napp.use(express.json())\n\n// Rate limiting for auth endpoints\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 20, // limit each IP to 20 requests per windowMs\n  message: 'Too many requests, please try again later.',\n})\n\nconst PORT = process.env.PORT || 3000\nconst io = new Server(server, {\n  cors: {\n    origin: '*', // TODO: restrict in production\n    methods: ['GET', 'POST'],\n  },\n})\n\n// Health route\napp.get('/health', async (req, res) => {\n  const authOk = await HealthChecker.checkAuthService()\n  const dbOk = await HealthChecker.checkDbConnection()\n  const appOk = await HealthChecker.checkAppCode()\n  const allOk = authOk && dbOk && appOk\n  res.json({\n    status: allOk ? 'OK' : 'FAIL',\n    auth: authOk,\n    db: dbOk,\n    app: appOk,\n  })\n})\n\n// Only start server if all health checks pass\nconst validateCriticalServices = async () => {\n  const authOk = await HealthChecker.checkAuthService()\n  const dbOk = await HealthChecker.checkDbConnection()\n  const appOk = await HealthChecker.checkAppCode()\n  if (authOk && dbOk && appOk) {\n    server.listen(PORT, () => {\n      console.log(`Server is running on http://localhost:${PORT}`)\n    })\n  } else {\n    console.error('Health check failed. Server not started.')\n    if (!authOk) console.error('Auth service health check failed.')\n    if (!dbOk) console.error('Database connection health check failed.')\n    if (!appOk) console.error('Application code health check failed.')\n    process.exit(1)\n  }\n}\n\n// Root route\napp.get('/', (req, res) => {\n  res.send('Welcome to the Call App Backend!')\n})\n\n// Auth routes\napp.use('/api/auth', authLimiter)\n\n// Chat routes\napp.use('/api/chat', chatRoutes)\n\n// Call routes\napp.use('/api/call', callRoutes)\n\nio.on('connection', (socket) => {\n  // Track active calls per user\n  const activeCalls = new Map() // userId -> callId\n\n  // Call request\n  socket.on(\n    SocketsEvents.CALL_REQUEST,\n    async (data: {\n      to: string\n      from: string\n      type: 'audio' | 'video'\n      offer: any\n    }) => {\n      // Busy user check\n      if (await isUserBusy(data.to)) {\n        socket.emit('CALL_BUSY', { to: data.to })\n        return\n      }\n\n      // data: { to, from, type, offer }\n      if (\n        !data ||\n        typeof data.to !== 'string' ||\n        typeof data.from !== 'string' ||\n        !['audio', 'video'].includes(data.type)\n      ) {\n        socket.emit('error', { error: 'Invalid call request' })\n        return\n      }\n      try {\n        // Create call record in DB\n        const call = await Call.create({\n          caller: data.from,\n          receiver: data.to,\n          type: data.type,\n          status: 'requested',\n        })\n\n        // Notify recipient\n        io.to(data.to).emit(SocketsEvents.CALL_REQUEST, {\n          callId: call._id,\n          from: data.from,\n          type: data.type,\n          offer: data.offer,\n        })\n\n        // Send push notification\n        const recipient = await User.findById(data.to)\n        if (recipient?.expoPushToken) {\n          await sendExpoNotification(\n            recipient.expoPushToken,\n            'Incoming Call',\n            `${data.from} is calling you!`,\n            { callId: call._id, type: data.type }\n          )\n        }\n\n        // Track call for timeout\n        activeCalls.set(data.from, call._id)\n        // Set timeout for unanswered call (e.g., 30s)\n        setTimeout(async () => {\n          const currentCall = await Call.findById(call._id)\n          if (currentCall && currentCall.status === 'requested') {\n            currentCall.status = 'missed'\n            await currentCall.save()\n            io.to(data.from).emit('CALL_TIMEOUT', { callId: call._id })\n            io.to(data.to).emit('CALL_TIMEOUT', { callId: call._id })\n            activeCalls.delete(data.from)\n          }\n        }, 30000)\n      } catch (err) {\n        socket.emit('error', { error: 'Failed to initiate call.' })\n      }\n    }\n  )\n\n  // Call accept\n  socket.on(\n    SocketsEvents.CALL_ACCEPT,\n    async (data: { callId: string; to: string; from: string; answer: any }) => {\n      // data: { callId, to, from, answer }\n      if (\n        !data ||\n        typeof data.callId !== 'string' ||\n        typeof data.to !== 'string' ||\n        typeof data.from !== 'string'\n      ) {\n        socket.emit('error', { error: 'Invalid call accept' })\n        return\n      }\n      try {\n        // Update call status\n        await Call.findByIdAndUpdate(data.callId, { status: 'accepted' }) // Update the call status to 'accepted'\n        // Notify caller\n        io.to(data.to).emit(SocketsEvents.CALL_ACCEPT, {\n          callId: data.callId,\n          from: data.from,\n          answer: data.answer,\n        })\n      } catch (err) {\n        socket.emit('error', { error: 'Failed to accept call.' })\n      }\n    }\n  )\n\n  // Call reject\n  socket.on(\n    SocketsEvents.CALL_REJECT,\n    async (data: { callId: string; to: string; from: string }) => {\n      if (\n        !data ||\n        typeof data.callId !== 'string' ||\n        typeof data.to !== 'string' ||\n        typeof data.from !== 'string'\n      ) {\n        socket.emit('error', { error: 'Invalid call reject' })\n        return\n      }\n      try {\n        await Call.findByIdAndUpdate(data.callId, { status: 'rejected' }) // Update the call status to 'rejected'\n\n        // Notify participants\n        io.to(data.to).emit(SocketsEvents.CALL_REJECT, {\n          callId: data.callId,\n          from: data.from,\n        })\n      } catch (err) {\n        socket.emit('error', { error: 'Failed to reject call.' })\n      }\n    }\n  )\n\n  // Call end\n  socket.on(\n    SocketsEvents.CALL_ENDED,\n    async (data: {\n      callId: string\n      to: string\n      from: string\n      endedAt?: Date\n      dataUsage?: number\n    }) => {\n      if (\n        !data ||\n        typeof data.callId !== 'string' ||\n        typeof data.to !== 'string' ||\n        typeof data.from !== 'string'\n      ) {\n        socket.emit('error', { error: 'Invalid call end' })\n        return\n      }\n      try {\n        // Update call record in DB as ended\n        await Call.findByIdAndUpdate(data.callId, {\n          status: 'ended',\n          endedAt: data.endedAt || new Date(),\n          dataUsage: data.dataUsage || 0,\n        })\n\n        // Notify participants\n        io.to(data.to).emit(SocketsEvents.CALL_ENDED, {\n          callId: data.callId,\n          from: data.from,\n        })\n      } catch (err) {\n        socket.emit('error', { error: 'Failed to end call.' })\n      }\n    }\n  )\n\n  // ICE candidate exchange\n  socket.on(SocketsEvents.ICE_CANDIDATE, (data) => {\n    // data: { to, candidate }\n    if (!data || typeof data.to !== 'string' || !data.candidate) {\n      socket.emit('error', { error: 'Invalid ICE candidate' })\n      return\n    }\n    io.to(data.to).emit(SocketsEvents.ICE_CANDIDATE, {\n      candidate: data.candidate,\n    })\n  })\n\n  // Real-time chat message handler\n  socket.on(\n    SocketsEvents.CHAT_MESSAGE,\n    async (data: { to: string; content: string; from: string }) => {\n      // data: { to, content, from }\n      if (\n        !data ||\n        typeof data.to !== 'string' ||\n        typeof data.content !== 'string' ||\n        !data.content.trim() ||\n        typeof data.from !== 'string'\n      ) {\n        socket.emit('error', { error: 'Invalid chat message' })\n        return\n      }\n      let message = null\n      let attempts = 0\n      const maxAttempts = 3\n      let lastError = null\n      while (attempts < maxAttempts && !message) {\n        try {\n          // Save the message to MongoDB first\n          message = await Message.create({\n            sender: data.from,\n            receiver: data.to,\n            content: data.content,\n            delivered: true,\n          })\n        } catch (err) {\n          lastError = err\n          attempts++\n          // Optionally, add a short delay before retrying\n          await new Promise((resolve) => setTimeout(resolve, 100 * attempts))\n        }\n      }\n      if (!message) {\n        socket.emit('error', { error: 'Failed to send message after retries.' })\n        return\n      }\n\n      // Emit to recipient (if online)\n      io.to(data.to).emit(SocketsEvents.CHAT_MESSAGE, {\n        _id: message._id,\n        sender: data.from,\n        receiver: data.to,\n        content: data.content,\n        delivered: true,\n        createdAt: message.createdAt,\n      })\n      // Optionally, emit to sender for confirmation\n      socket.emit('chat delivered', { _id: message._id })\n\n      // Send push notification to recipient\n      const recipient = await User.findById(data.to)\n      if (recipient?.expoPushToken) {\n        await sendExpoNotification(\n          recipient.expoPushToken,\n          'New Message',\n          `${data.from}: ${data.content}`,\n          { messageId: message._id, from: data.from }\n        )\n      }\n    }\n  )\n\n  // Start Typing event\n  socket.on(SocketsEvents.CHAT_TYPING, (data: { to: string; from: string }) => {\n    if (!data || typeof data.to !== 'string' || typeof data.from !== 'string') {\n      socket.emit('error', { error: 'Invalid typing event' })\n      return\n    }\n    io.to(data.to).emit(SocketsEvents.CHAT_TYPING, { from: data.from })\n  })\n\n  // Stop Typing event\n  socket.on(\n    SocketsEvents.CHAT_STOP_TYPING,\n    (data: { to: string; from: string }) => {\n      if (\n        !data ||\n        typeof data.to !== 'string' ||\n        typeof data.from !== 'string'\n      ) {\n        socket.emit('error', { error: 'Invalid stop typing event' })\n        return\n      }\n      io.to(data.to).emit(SocketsEvents.CHAT_STOP_TYPING, { from: data.from })\n    }\n  )\n\n  // Handle user joining\n  socket.on(SocketsEvents.CALL_REQUEST, (data: any) => {\n    if (!data || typeof data.to !== 'string' || !data.offer) {\n      socket.emit('error', { error: 'Invalid call request' })\n      return\n    }\n    console.log(`User ${data.to} has requested a call`)\n    io.to(data.to).emit(SocketsEvents.CALL_REQUEST, {\n      from: socket.id,\n      offer: data.offer,\n    })\n  })\n\n  // Message read event\n  socket.on(SocketsEvents.MESSAGE_READ, async (data: { messageId: string }) => {\n    if (!data || typeof data.messageId !== 'string') {\n      socket.emit('error', { error: 'Invalid message read event' })\n      return\n    }\n\n    try {\n      await Message.findByIdAndUpdate(data.messageId, { read: true })\n      io.to(socket.id).emit(SocketsEvents.MESSAGE_READ, {\n        messageId: data.messageId,\n      })\n    } catch (error) {\n      socket.emit('error', { error: 'Failed to mark message as read' })\n    }\n  })\n\n  // Handle user accepting a call\n  socket.on(SocketsEvents.CALL_ACCEPT, (data: any) => {\n    if (!data || typeof data.to !== 'string' || !data.offer) {\n      socket.emit('error', { error: 'Invalid call accept' })\n      return\n    }\n    console.log(`User ${data.to} has accepted the call`)\n    io.to(data.to).emit(SocketsEvents.CALL_ACCEPT, {\n      from: socket.id,\n      offer: data.offer,\n    })\n  })\n})\n\nawait validateCriticalServices()\n\n// Graceful shutdown\nprocess.on('SIGTERM', () => {\n  console.log('SIGTERM signal received: closing HTTP server')\n  server.close(() => {\n    console.log('HTTP server closed')\n  })\n})\n"]}